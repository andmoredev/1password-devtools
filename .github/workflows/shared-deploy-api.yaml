name: Deploy API

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      STACK_NAME:
        required: true
        type: string
    outputs:
      API_BASE_URL:
        value: ${{ jobs.deploy.outputs.API_BASE_URL }}
      COGNITO_USER_POOL_ID:
        value: ${{ jobs.deploy.outputs.COGNITO_USER_POOL_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    outputs:
      API_BASE_URL: ${{ steps.getStackOutputs.outputs.API_BASE_URL }}
      COGNITO_USER_POOL_ID: ${{ steps.getStackOutputs.outputs.COGNITO_USER_POOL_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          PIPELINE_EXECUTION_ROLE: op://andmoredev-sandbox/cicd/pipeline-execution-role-arn
          CLOUDFORMATION_EXECUTION_ROLE: op://andmoredev-sandbox/cicd/cloudformation-exeuction-role-arn
          ARTIFACTS_BUCKET_NAME: op://andmoredev-sandbox/cicd/artifact-bucket-name

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: sam-deploy
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: SAM Build and Deploy
        run: |
          op --version
          op inject -i .\samconfig.yaml -o .\samconfig-ci.yaml

          npm install -g esbuild
          npm ci

          sam --info

          sam build \
          --config-file samconfig.ci.yaml

          sam deploy \
          --config-file samconfig.ci.yaml \
          --s3-bucket ${{ env.ARTIFACTS_BUCKET_NAME }} \
          --no-fail-on-empty-changeset \
          --role-arn ${{ env.CLOUDFORMATION_EXECUTION_ROLE }}

      - id: getStackOutputs
        name: Get Stack Outputs
        run: |
          stackOutputJson=$(aws cloudformation describe-stacks --output json --stack-name ${{ inputs.STACK_NAME }} --query "Stacks[0].Outputs")
          url=$(echo $stackOutputJson | jq -r '.[] | select(.OutputKey=="ApiURL") | .OutputValue')
          cognitoUserPoolId=$(echo $stackOutputJson | jq -r '.[] | select(.OutputKey=="CognitoUserPoolId") | .OutputValue')
          echo "# Resource Summary" >> $GITHUB_STEP_SUMMARY
          echo "* API - $url" >> $GITHUB_STEP_SUMMARY
          echo "* Cognito User Pool Client ID - $cognitoUserPoolId" >> $GITHUB_STEP_SUMMARY
          echo "API_BASE_URL=$url" >> $GITHUB_OUTPUT
          echo "COGNITO_USER_POOL_ID=$cognitoUserPoolId" >> $GITHUB_OUTPUT